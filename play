#!/bin/bash

#Config file location
listpath="/home/$USER/.config/play/"
config="$listpath"config
games="$listpath"games.list

if ! [ -f $config ]
then
	echo "Config file not found at \"$config\""
	exit
fi

#Vars/arrs used for script
gamecmd="$1"
prgm=""
line=""
pathf=""
ctr=0
rctr=0
appID=0
taskname=""
result=""
task=""
answer=""
longestshort=0
longestlong=0
longestpathf=0
longestservicename=0
ip=`cat $config | sed -n -e 's/^.*ip=//p'`
wr=`cat $config | sed -n -e 's/^.*wr=//p'`
display=`cat $config | sed -n -e 's/^.*display=//p'`
ControlMyMonitor=`cat $config | sed -n -e 's/^.*ControlMyMonitor=//p'`
ControlMyMonitor=${ControlMyMonitor//\\//}
declare -a short
declare -a long
declare -a path
declare -a servicename

#Shortcut locations to make adding games easier
STEAM="steam://rungameid/"
DESKTOP=`cat $config | sed -n -e 's/^.*desktop=//p'`
APPDATA=`cat $config | sed -n -e 's/^.*appdata=//p'`

function check_for_duplicate()
{
	dctr=0

	#Set delimiter to comma
	IFS=','

	while IFS= read -r line
	do
		read -a strarr <<< "$line"

		for (( n=0; n < ${#strarr[*]}; n++))
		do
			if [ "${strarr[n]}" == "$1" ]
			then
				get_record $dctr "$line"
				echo -e "Duplicate entry for \""$1"\" found:"
				echo
				get_verbose_header_spacing
				print_verbose_header
				pathf="${path[$dctr]}"
				format_pathf
      				print_verbose_record "${short[$dctr]}" "${long[$dctr]}" "$pathf" "${servicename[$dctr]}"

				exit
			fi
		done
		((dctr++))
	done < $games
}
function format_pathf()
{
	pathf="${pathf//\"/}"
	pathf="${pathf//%STEAM%/$STEAM}"
	pathf="${pathf//%DESKTOP%/$DESKTOP}"
	pathf="${pathf//%APPDATA%/$APPDATA}"
}
function get_normal_header_spacing()
{
	for (( IFS=" " i=0; i<$ctr; i++ ))
	do
		if [ "${#short[i]}" -gt "$longestshort" ]
		then
			longestshort="${#short[i]}"
		fi
		if [ "${#long[i]}" -gt "$longestlong" ]
		then
			longestlong="${#long[i]}"
		fi
        done
}
function get_verbose_header_spacing()
{
	for (( IFS=" " i=0; i<$ctr; i++ ))
	do
		if [ "${#short[i]}" -gt "$longestshort" ]
		then
			longestshort="${#short[i]}"
		fi
		if [ "${#long[i]}" -gt "$longestlong" ]
		then
			longestlong="${#long[i]}"
		fi

		pathf="${path[i]}"
		format_pathf

		if [ "${#pathf}" -gt "$longestpathf" ]
		then
			longestpathf="${#pathf}"
		fi
		if [ "${#servicename[i]}" -gt "$longestservicename" ]
		then
			longestservicename="${#servicename[i]}"
		fi
        done

	#For -a option
	if [ "$1" ]
	then
		if [ "${#1}" -gt "$longestshort" ]
		then
			longestshort="${#1}"
		fi
		if [ "${#2}" -gt "$longestlong" ]
		then
			longestlong="${#2}"
		fi

		pathf="${3}"
		format_pathf

		if [ "${#pathf}" -gt "$longestpathf" ]
		then
			longestpathf="${#pathf}"
		fi
		if [ "${#4}" -gt "$longestservicename" ]
		then
			longestservicename="${#4}"
		fi
	fi
}
function get_record()
{
	short[$1]=$(echo "$2" | grep -Po '([^,]+)' | head -1)
	long[$1]=$(echo "$2" | grep -Po '([^,]+)' | head -2 | tail -1)
	path[$1]=$(echo "$2" | grep -Po '([^,]+)' | head -3 | tail -1)
	servicename[$1]=$(echo "$2" | grep -Po '([^,]+)' | head -4 | tail -1)
}
function print_normal_header()
{
	printf "%-$((${longestshort}+1))s  %-$((${longestlong}))s\n" "Command" "Game Title"

	for (( i=0; i<=$longestshort; i++ ))
	do
		echo -n "─"
	done

	echo -n ┬

	for (( i=0; i<=$longestlong; i++ ))
	do
		echo -n "─"
	done

	echo
}
function print_verbose_header()
{
	printf "%-$((${longestshort}+1))s  %-$((${longestlong}))s   %-$((${longestpathf}))s   %-$((${longestservicename}))s\n" "Command" "Game Title" "Path" "File Name"

	for (( i=0; i<=$longestshort; i++ ))
	do
		echo -n "─"
	done

	echo -n ┬

	for (( i=0; i<=$(($longestlong+1)); i++ ))
	do
		echo -n "─"
	done
	
	echo -n ┬

	for (( i=0; i<=$(($longestpathf+1)); i++ ))
	do
		echo -n "─"
	done

	echo -n ┬

	for (( i=0; i<=$longestservicename; i++ ))
	do
		echo -n "─"
	done

	echo
}
function print_normal_record()
{
	printf '%s%*s │ %s%*s\n' "$1" "$(($longestshort - ${#1}))" "" \
				 "$2" "$(($longestlong - ${#2}))" "";
}
function print_verbose_record()
{
	printf '%s%*s │ %s%*s │ %s%*s │ %s%*s\n' "$1" "$(($longestshort - ${#1}))" "" \
						 "$2" "$(($longestlong - ${#2}))" "" \
						 "$3" "$(($longestpathf - ${#3}))" "" \
						 "$4" "$(($longestservicename - ${#4}))" "";
}
function print_help()
{
	echo -e "Launch program on remote Windows PC and change monitor inputs automatically.\n"
	echo -e "USAGE"
	echo -e "-----"
	echo -e
	echo -e "\e[3mplay [COMMAND]\e[0m"
	echo -e "Launch the game defined by the COMMAND parameter.\n"
	echo -e "\e[3mplay -l\e[0m"
	echo -e "Print a formatted table of games saved to the games.list file excluding file paths.\n"
	echo -e "\e[3mplay -lv\e[0m"
	echo -e "Print a formatted table of games saved to the games.list file including file paths and task names.\n"
	echo -e "\e[3mplay -f [PATTERN]\e[0m"
	echo -e "Search for a matching PATTERN in the games.list file and list results excluding file paths.\n"
	echo -e "\e[3mplay -fv [PATTERN]\e[0m"
	echo -e "Search for a matching PATTERN in the games.list file and list results including file paths and task names.\n"
	echo -e "\e[3mplay -a [COMMAND] [TITLE] [PATH] [TASK]\e[0m"
	echo -e "Add a game to the list that is located at the PATH on the Windows machine, is started by using the COMMAND parameter, and can be easily referenced in the -l functionality by the game's formal TITLE, which shows up in task manager as TASK (typically a \".exe\" file).\n"
	echo -e "\tFilepath shortcuts for PATH"
	echo -e "\t---------------------------"
	printf  "\t%-10s %-1s %-50s\n" "%STEAM%" "=" "$STEAM"
	printf  "\t%-10s %-1s %-50s\n" "%DESKTOP%" "=" "$DESKTOP"
	printf  "\t%-10s %-1s %-50s\n\n" "%APPDATA%" "=" "$APPDATA"
	echo -e "\e[3mplay -r [PATTERN]\e[0m"
	echo -e "Search for a matching PATTERN in the games.list file and remove it from the games.list file. This will generate a games.list.bak file, which is the games.list file before the specified program is removed.\n"
	echo -e "\e[3mplay -?\e[0m OR \e[3mplay --help\e[0m"
	echo -e "Print this help text.\n"
}
function list_games()
{
	for (( i=0; i<$ctr; i++ ))
	do
		printf '%s%*s │ %s%*s\n' "${short[i]}" "$(($longestshort - ${#short[i]}))" "" \
					 "${long[i]}" "$(($longestlong - ${#long[i]}))" "";

        done
}
function list_games_verbose()
{
        for (( i=0; i<$ctr; i++ ))
	do
		pathf="${path[i]//\\/}"
		format_pathf
		printf '%s%*s │ %s%*s │ %s%*s │ %s%*s\n' "${short[i]}" "$(($longestshort - ${#short[i]}))" "" \
							 "${long[i]}" "$(($longestlong - ${#long[i]}))" "" \
							 "${pathf}" "$(($longestpathf - ${#pathf}))" "" \
							 "${servicename[i]}" "$(($longestservicename - ${#servicename[i]}))" "";
        done
}
function run_game()
{
	isRunning=0

	echo -e "Changing monitor input and launching \"\033[1;37;1m$1\033[0m\""
	sudo chmon $display
	winrun "powershell -command start-process \\\"$1\\\""

	while [[ 1 ]]
	do
		#echo -e "Checking tasklist for \"$task\": \e[32m$(winrun tasklist | grep -i "$task" | head -1)\e[0m"

		#Wait for program to actually show up in Task Manager (accounts for user messing around in launcher)
		if [ -n "$(winrun tasklist -t 3 | grep -i "$task")" ] && [ $isRunning -eq 0 ]
		then
			echo -e "\"\033[1;37;1m$task\033[0m\" found to be running"
			isRunning=1

		#Switch monitor inputs when program is no longer running
		elif [ -z "$(winrun tasklist -t 3 | grep -i "$task")" ] && [ $isRunning -eq 1 ]
		then
			echo -e "No longer seeing \"\033[1;37;1m$task\033[0m\" running on Windows system, changing display input"
			winrun "run $ControlMyMonitor /SetValue \\\\.\DISPLAY1\Monitor0 60 3"
			break;
		fi
	done
}

#Check that winrund is running first
if [ -n "$(winrun hostname 2>&1 | grep winrund)" ]
then
	echo -e "winrund is not running" >&2
	exit
fi

#Load games from games.list file
if [ -f $games ]
then
	#Read games list
	while IFS= read -r line
	do
		short[$ctr]=$(echo $line | awk -F, '{print $1}')
		long[$ctr]=$(echo $line | awk -F, '{print $2}')
		path[$ctr]=$(echo $line | awk -F, '{print $3}')
		servicename[$ctr]=$(echo $line | awk -F, '{print $4}')
		((ctr++))
	done < $games
else
	#Make games list file if it does not exist
	echo $games file  not found, creating!
	touch $games
fi

#Check for script arguments
while [ "$#" != "" ]
do
	case "$1" in
		-l)#List games

			if [ "$2" ]
			then
				echo -e "Detected arguments after \""$1"\". Ignoring, as these are not used...\n"
			fi

			get_normal_header_spacing
			print_normal_header
			list_games | sort
			break;;

		-lv)#Display games list with more info
			
			if [ "$2" ]
			then
				echo -e "Detected arguments after \""$1"\". Ignoring, as these are not used...\n"
			fi

			get_verbose_header_spacing
			print_verbose_header
			list_games_verbose | sort
                        break;;

		-f)#Find for parameter and display

			if [ ! "$2" ]
			then
				echo "Missing search parameter!" >&2
				break
			fi
			if [ "$3" ]
			then
				echo -e "Detected arguments after \""$2"\". Ignoring, as these are not used...\n"
			fi

			get_normal_header_spacing
			print_normal_header
			list_games | grep -i "$2" | sort
			break;;

		-fv)#Find for parameter and display with more info

			if [ ! "$2" ]
			then
				echo "Missing search parameter!" >&2
				break
			fi
			if [ "$3" ]
			then
				echo -e "Detected arguments after \""$2"\". Ignoring, as these are not used...\n"
			fi

			get_verbose_header_spacing
			print_verbose_header
 			list_games_verbose | grep -i "$2" | sort
			break;;

		-a)#Add game to list

			if [ ! "$2" ]
			then
				echo "Missing program command string!" >&2
				break

				elif [ ! "$3" ]
				then
					echo "Missing program title!" >&2
					break

					elif [ ! "$4" ]
					then
						echo "Missing program path!" >&2
						break

						elif [ ! "$5" ]
						then
							echo "Missing program task name!" >&2
							break
			fi
			if [ "$6" ]
			then
				echo -e "Detected arguments after \""$5"\". Ignoring, as these are not used...\n"
			fi

			#Check for duplicate entry
			check_for_duplicate "$2"
			check_for_duplicate "$3"
			check_for_duplicate "$4"

			#If no duplicate is found, add entry
			if [ ! $match ]
			then
				pathf="${4//\\//}"
				echo ""$2","$3","$pathf","$5"" >> "$games"
				echo "Added the following record:"
				echo
				get_verbose_header_spacing "$2" "$3" "$pathf" "$5"
				print_verbose_header
      				print_verbose_record "$2" "$3" "$pathf" "$5"
			fi

			break;;

		-r)#Attempt to remove game from list

			if [ ! "$2" ]
			then
				echo "Missing search parameter!" >&2
				break
			fi
			if [ "$3" ]
			then
				echo -e "Detected arguments after \""$2"\". Ignoring, as these are not used...\n"
			fi

			rctr=0
			while IFS= read -r line
			do
				if [[ -n $(echo $line | grep "$2") ]]
				then
					match=1

					get_record $rctr "$line"
					echo "Discovered the following matching record:"
					echo
					get_verbose_header_spacing
					print_verbose_header
					pathf="${path[$rctr]}"
					format_pathf
      					print_verbose_record "${short[$rctr]}" "${long[$rctr]}" "$pathf" "${servicename[$rctr]}"
					echo					

					while [[ $answer != "y" && $answer != "n" ]]
					do
						echo -n "Remove this record? (y/n): "
						read -r answer </dev/tty
					done

					if [ $answer == "n" ]
					then
						echo "$games not changed."
						break
					fi

					echo
					echo "Removed the following record:"
					print_verbose_header
					print_verbose_record "${short[$rctr]}" "${long[$rctr]}" "$pathf" "${servicename[$rctr]}"

					#Shift all entries beyond the removed entry down one
					for (( i=$rctr; i<ctr; i++ ))
					do
						short[i]=${short[i+1]}						
						long[i]=${long[i+1]}
						path[i]=${path[i+1]}
						servicename[i]=${servicename[i+1]}
					done

					#Rebuild games.list
					cp $games $games.bak
					rm $games
					for (( i=0; i<(ctr-1); i++ ))
					do
						echo "${short[i]}","${long[i]}","${path[i]}","${servicename[i]}" >> $games
					done

					break
				fi

				((rctr++))
			done < $games


			if [ ! $match ]
			then
				echo -e "Did not find match for \""$2"\" in \"$games\""
			fi
			break;;

		-? | --help)#Print help text

			if [ "$2" ]
			then
				echo -e "Detected arguments after \""$1"\". Ignoring, as these are not used...\n"
			fi

			print_help
			break;;

		*)#Search for matching game
	
			if [ ! "$1" ]
			then
				print_help
				break;
			fi

			if [ "$2" ]
			then
				echo -e "Detected arguments after \""$1"\". Ignoring, as these are not used...\n"
			fi

			echo -n "Checking if \""$1"\" matches a known game in games.list... "
			shopt -s nocasematch
			for (( i=0; i<$ctr; i++ ))
			do
				if [[ "$1" == "${short[i]}" ]]
				then
					path[i]="${path[i]//%STEAM%/$STEAM}"
					path[i]="${path[i]//%DESKTOP%/$DESKTOP}"
					path[i]="${path[i]//%APPDATA%/$APPDATA}"
					prgm="${path[i]}"
					task="${servicename[i]}"
					break
				fi
			done
			shopt -u nocasematch

			#If there was a match, run program. Otherwise, run first arg as is.
			if [ "$prgm" != "" ]
			then
				echo -e "\033[0;32;1mFound\033[0m!"
				run_game "$prgm"
			else
				echo -e "\033[0;31;1mNot found\033[0m!"

				while [[ $answer != "y" && $answer != "n" ]]
				do
					echo -n "Do you want to run \"$1\"? (y/n): "
					read -r answer </dev/tty
				done

				if [ $answer == "n" ]
				then
					exit
				fi

				run_game "$1"
			fi

			break;;
	esac
	shift
done
