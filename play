#!/bin/bash

#Config file location
path="/home/$USER/.config/play/"
config="$path"config

if ! [ -f $config ] ; then
	echo "Config file not found at \"$config\""
	exit
fi

#Vars/arrs used for script
gamecmd="$1"
prgm=""
line=""
pathf=""
ctr=0
appID=0
taskname=""
result=""
task=""
ip=`cat $config | sed -n -e 's/^.*ip=//p'`
wr=`cat $config | sed -n -e 's/^.*wr=//p'`
display=`cat $config | sed -n -e 's/^.*display=//p'`
ControlMyMonitor=`cat $config | sed -n -e 's/^.*ControlMyMonitor=//p'`
ControlMyMonitor=${ControlMyMonitor//\\//}
declare -a short
declare -a long
declare -a path
declare -a servicename

#Shortcut locations to make adding games easier
STEAM="steam://rungameid/"
DESKTOP=`cat $config | sed -n -e 's/^.*desktop=//p'`
APPDATA=`cat $config | sed -n -e 's/^.*appdata=//p'`

function print_normal_header()
{
	printf "%-10s           %-25s\n" "Command" "Game Title"
        echo -n "--------------------------------"
}
function print_verbose_header()
{
	printf "%-10s           %-25s      %-46s          %s\n" "Command" "Game Title" "Path" "Task Name"
        echo -n "--------------------------------------------------------------------------------------------------------------------------"

}
function list_games()
{
        for (( IFS=" " i=0; i<$ctr; i++ )); do
                printf "%-15s|     %-25s\n" "${short[i]}" "${long[i]}"
        done
	echo
}
function list_games_verbose()
{
        for (( IFS=" " i=0; i<$ctr; i++ )); do
		#Remove/replace backslash, quote marks, and path shortcuts from path and print result in table
		pathf="${path[i]//\\/}"
		pathf="${pathf//\"/}"
		pathf="${pathf//%STEAM%/$STEAM}"
		pathf="${pathf//%DESKTOP%/$DESKTOP}"
		pathf="${pathf//%APPDATA%/$APPDATA}"
      		printf "%-15s|     %-25s|     %-50s|     %s\n" "${short[i]}" "${long[i]}" "$pathf" "${servicename[i]}"
        done
	echo
}
function run_game()
{
	echo "Changing monitor input and launching winrun with parameters \"start $1\""
	sudo chmon $display
	winrun "start $1"

	while [[ 1 ]]; do
		if [[ $(winrun "tasklist /fi \"SESSIONNAME eq CONSOLE\" /fo list" | grep -i $task) == "" ]]; then
			echo "No longer seeing $task running on Window system, changing display input."
			winrun "run $ControlMyMonitor /SetValue \\\\.\DISPLAY1\Monitor0 60 4"
			break;
		fi
	done
}

#Load games from games.list file
if [ -f $path"games.list" ]; then

	#Read games list
	while IFS= read -r line; do
		short[$ctr]=$(echo $line | awk -F, '{print $1}')
		long[$ctr]=$(echo $line | awk -F, '{print $2}')
		path[$ctr]=$(echo $line | awk -F, '{print $3}')
		servicename[$ctr]=$(echo $line | awk -F, '{print $4}')
		((ctr++))
	done < $path"games.list"
else
	#Make games list file if it does not exist
	echo $path"games.list" file  not found, creating!
	touch $path"games.list";
fi

#Check for script arguments
while [ "$#" != "" ]
do
	case "$1" in
		-l)
			#Display games list
			if [ $2 ]; then
				echo -e "Detected arguments after \"$1\". Ignoring, as these are not used...\n"
			fi

			print_normal_header
			list_games | sort
			break;;
		-lv)
                        #Display games list with more info
			if [ $2 ]; then
				echo -e "Detected arguments after \"$1\". Ignoring, as these are not used...\n"
			fi

                        print_verbose_header
			list_games_verbose | sort
                        break;;

		-f)
			#Find for parameter and display
			if [ ! $2 ]; then
				echo "No search parameter detected!"
				break
			fi
			if [ $3 ]; then
				echo -e "Detected arguments after \"$2\". Ignoring, as these are not used...\n"
			fi

			print_normal_header
			echo
			list_games | grep -i $2 | sort
			break;;
		-fv)
                        #Find for parameter and display
			if [ ! $2 ]; then
				echo "Missing search parameter!"
				break
			fi
			if [ $3 ]; then
				echo -e "Detected arguments after \"$2\". Ignoring, as these are not used...\n"
			fi

			print_verbose_header
			echo
 			list_games_verbose | grep -i $2 | sort
			break;;

		-a)
			#Add game to list
			if [ ! $2 ]; then
				echo "Missing program command string!"
				break

				elif [ ! $3 ]; then
					echo "Missing program title!"
					break

					elif [ ! $4 ]; then
						echo "Missing program path!"
						break

						elif [ ! $5 ]; then
							echo "Missing program task name!"
							break
			fi
			if [ $6 ]; then
				echo -e "Detected arguments after \"$5\". Ignoring, as these are not used...\n"
			fi

			pathf="${4//\\//}"
			echo "$2,$3,"$pathf",$5 >> "$path"games.list"
			echo "Added \"$3\" to the games list."
			break;;
		-r)
			#Attempt to remove game from list
			if [ ! $2 ]; then
				echo "Missing search parameter!"
				break
			fi
			if [ $3 ]; then
				echo -e "Detected arguments after \"$3\". Ignoring, as these are not used...\n"
			fi

			if grep -q "$2" ./games.list; then
				match="$(grep "$2" ./games.list | grep -o ',.*,' | head -1)"
				match="${match//,/}"
				sed -i "/$match,/d" ./games.list
				echo "Removed \"$match\" from the games list."
			else
				echo "Did not find match for \"$2\" in games list."
			fi
			break;;
		-? | --help)
			#Print help text
			if [ $2 ]; then
				echo -e "Detected arguments after \"$1\". Ignoring, as these are not used...\n"
			fi

			echo -e "Launch program on remote Windows PC and change monitor inputs automatically.\n"
			echo -e "USAGE"
			echo -e "-----"
			echo -e
			echo -e "\e[3mplay [COMMAND]\e[0m"
			echo -e "Launch the game defined by the COMMAND parameter.\n"
			echo -e "\e[3mplay -l\e[0m"
			echo -e "Print a formatted table of games saved to the games.list file excluding file paths.\n"
			echo -e "\e[3mplay -lv\e[0m"
                        echo -e "Print a formatted table of games saved to the games.list file including file paths and task names.\n"
			echo -e "\e[3mplay -f [PATTERN]\e[0m"
			echo -e "Search for a matching PATTERN in the games.list file and list results excluding file paths.\n"
			echo -e "\e[3mplay -fv [PATTERN]\e[0m"
                        echo -e "Search for a matching PATTERN in the games.list file and list results including file paths and task names.\n"
			echo -e "\e[3mplay -a [COMMAND] [TITLE] [PATH]\e[0m"
			echo -e "Add a game to the list that is located at the PATH on the Windows machine, is started by using the COMMAND parameter, and can be easily referenced in the -l functionality by the game's formal TITLE.\n"
			echo -e "\tFilepath shortcuts for PATH"
			echo -e "\t---------------------------"
			printf  "\t%-10s %-1s %-50s\n" "%STEAM%" "=" "$STEAM"
			printf  "\t%-10s %-1s %-50s\n" "%DESKTOP%" "=" "$DESKTOP"
			printf  "\t%-10s %-1s %-50s\n\n" "%APPDATA%" "=" "$APPDATA"
			echo -e "\e[3mplay -r [PATTERN]\e[0m"
			echo -e "Search for a matching PATTERN in the games.list file and remove it from the games.list file.\n"
			echo -e "\e[3mplay -?\e[0m OR \e[3mplay --help\e[0m"
			echo -e "Print this help text.\n"
			break;;
		*)
			#Search for matching game
			if [ $2 ]; then
				echo -e "Detected arguments after \"$1\". Ignoring, as these are not used...\n"
			fi

			echo -n "Checking if \"$1\" matches a known game in games.list... "
			shopt -s nocasematch
			for (( i=0; i<$ctr; i++ )); do
				if [[ "$1" == "${short[i]}" ]]; then
					path[i]="${path[i]//%STEAM%/$STEAM}"
					path[i]="${path[i]//%DESKTOP%/$DESKTOP}"
					path[i]="${path[i]//%APPDATA%/$APPDATA}"
					prgm="${path[i]}"
					task="${servicename[i]}"
					break
				fi
			done
			shopt -u nocasematch

			#If there was a match, run program. Otherwise, run first arg as is.
			if [ "$prgm" != "" ]; then
				echo "Found!"
				run_game "$prgm"
			else
				echo "Not found!"
				run_game "$1"
			fi

			break;;
	esac
	shift
done
